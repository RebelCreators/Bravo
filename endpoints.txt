endpoints

/user
{
name
email
birthdate
gender

}

PUT /users/profile/update
{
location
details: String , 
profileImages:[String],

if helper
appearance: {
	eyeColor: String,
	bodyType: String,
	height: String,
	weight: String,
	hairColor: String
	ethnicity: String
},
services: [{
	name: String,
	hourlyRate: String,
	minimum: Int
}]
}

GET /users/profile
{
details: String , 
profileImages:[String], 
user: {
firstName: String,
lastName: String,
birthDate:Date,
userId: String,
email: String
},
type: enum {"Helper", "Client"},
overallRating: Int,
if helper
appearance: {
	eyeColor: String,
	bodyType: String,
	height: String,
	weight: String,
	hairColor: String
	ethnicity: String
},
services: [{
	serviceId: String,
	name: String,
	description: String,
	hourlyRate: String,
	minimum: Int,
	highestRating: {
		user: { 
		displayName 
			},
   	 	comments: String,
		rating: Int
	}
	averageRating: Int
	}
}]
}

GET /users/:user_id/profile
{ ^^^^^^^^^^ }

POST /users/search?limit&offset
request
{
filters: {age:, hair, distance:{miles, zip}, date}, 
sort: enum {"ASC", "DSC", "NEAR"}}
response
^^^^
{userProfiles:[UserProfile]}

GET /users/lists/promoted?limit&offset
^^^^^
{userProfiles:[UserProfile]}

GET /users/:user_id/ratings?limit&offset
response
{
ratingDetail:[{
rating: Int,
date: Date,
comments: String
}]}

POST /users/location/update
{
lat:String,
lng: String
}

POST /users/availability/check
request
{
date: Date
}
response
{
   date: Date,
   unavailableAllDay: Bool ,
   timeUnavailable: [
   time: Double (0 - 24.0),
   duration: Int
   ], 
   startOfDay: Date,
   endOfDay: Date
}

Get /users/availability/lists/exlusions
response
{
   date: String,
   time: Double (0 - 24.0),
   unavailableAllDay: Bool, 
   duration: Int
}

PUT /users/availability/exlusions/add
request
{
   date: String,
   time: Double (0 - 24.0),
   unavailableAllDay: Bool, 
   duration: Int
    }

POST service/:service_id/respond
request
{
action: enum {"accept", "reject"}
}

services/lists/upcoming
//service details
 [{
  helper profile,
  { 
  	^^^^^^^^
  },
  description: String,
  ownerID: String,
  clientID: String,
  location,
  time: Double (0 - 24.0),
  date: Date,
  duration: Double,
  costPerHour: Double,
  comments: String,
  status: enum ["canceled", "pending", "in_transit", "arrived",  "completed"],
  canceledBy: enum ["Client", "Helper"]?,
  clientCompleted: Bool
  helper completed: Bool
  clientRating: {
    rating: Int,
    date: Date,
    comments: String
  }, 
  helperRating: {
    rating: Int,
    date: Date,
    comments: String
  },
  service: {
	serviceId: String,
	name: String,
	description: String,
	hourlyRate: String,
	minimum: Int,
	highestRating: {
		user: { 
		displayName 
			},
   	 	comments: String,
		rating: Int
	}
	averageRating: Int
	}
}
 }]
services/lists?limit&offset
^^^^^ Upcoming + Pending + PAST

services/lists/pending
^^^^ Pending Only

services/lists/past?limit&offset
^^^^ Past only

services/search?q
request for helpers only
{
filters: {age:, hair, distance:{miles, zip}, date}, 
sort: enum {"ASC", "DSC", "NEAR"}}
response
^^^^
{services:  [{
  helper profile,
  { 
  	^^^^^^^^
  },
  description: String,
  ownerID: String,
  clientID: String,
  location,
  time: Double (0 - 24.0),
  date: Date,
  duration: Double,
  costPerHour: Double,
  comments: null,
  status: enum "pending" : ["canceled", "pending", "in_transit", "arrived",  "completed"],
  canceledBy: enum ["Client", "Helper"]?,
  clientCompleted: Bool
  helper completed: Bool
  clientRating: null, 
  helperRating: null,
  service: {
	serviceId: String,
	name: String,
	description: String
}
 }]}

services/create
services/request
services/:service_id/update
services/:service_id/rate/add
services/search?q helpersOnly
services/:service_id/flag/add
services/:service_id/flag/list

/settings/list
/settings/bank
/settings/bank/:id/delete
/settings/bank/add
/settings/phone/verify
/settings/cards/:id/delete
/settigs/card/add
/settings/update
/settings/block/user
/setting/block/list
/setting/trustscore


